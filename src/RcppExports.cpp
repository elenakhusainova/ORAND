// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// impurityScores
NumericVector impurityScores(DataFrame data, IntegerVector rClasses, List patternPool, String& rMetric);
RcppExport SEXP _ORAND_impurityScores(SEXP dataSEXP, SEXP rClassesSEXP, SEXP patternPoolSEXP, SEXP rMetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rClasses(rClassesSEXP);
    Rcpp::traits::input_parameter< List >::type patternPool(patternPoolSEXP);
    Rcpp::traits::input_parameter< String& >::type rMetric(rMetricSEXP);
    rcpp_result_gen = Rcpp::wrap(impurityScores(data, rClasses, patternPool, rMetric));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP f4r_fpgrowth(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_ORAND_impurityScores", (DL_FUNC) &_ORAND_impurityScores, 4},
    {"f4r_fpgrowth", (DL_FUNC) &f4r_fpgrowth, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ORAND(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
